function parse_git_branch () {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

function job_count () {
  jobs | wc -l
}
   
RED="\[\033[0;31m\]"; YELLOW="\[\033[0;33m\]"; GREEN="\[\033[0;32m\]"; NO_COLOR="\[\033[0m\]"
    
PS1="$GREEN\h$NO_COLOR:\w$YELLOW:\$(parse_git_branch)$NO_COLOR:\$(job_count)\$ "

function m() {
  if [ "$1" == "ci" ]; then 
    mvn clean install
    if [ $? -ne 0 ]; then more target/surefire-reports/*.txt; fi
  elif [ "$1" == "ccas" ]; then 
    mvn clean compile assembly:single
  elif [ "$1" == "cid" ]; then 
    mvn clean install deploy
    if [ $? -ne 0 ]; then more target/surefire-reports/*.txt; fi
  elif [ "$1" == "err" ]; then 
    more target/surefire-reports/*.txt
  fi
}

function c() {
  if [ "$1" == "w" ]; then cd *.wiki
  elif [ -e ~/github ]; then cd ~/github
  else cd ~
  fi
  if [ "$1" == "s" ]; then 
    if [ -e FireSight ]; then cd FireSight; else cd FireREST/FireSight; fi
  elif [ "$1" == "o" ]; then cd openpnp/gui
  elif [ "$1" == "io" ]; then cd firepick1.github.io
  elif [ "$1" == "rcl" ]; then cd firerest-client
  elif [ "$1" == "rcm" ]; then cd firerest-cmd
  elif [ "$1" == "r" ]; then cd FireREST
  elif [ "$1" == "mote" ] || [ "$1" == "m" ]; then cd FireMote
  elif [ "$1" == "c" ]; then cd FirePiCam
  elif [ "$1" == "pixel" ]; then cd ~/pixel
  elif [ "$1" == "f" ]; then
    if [ -e FireFUSE ]; then cd FireFUSE
    else cd FireREST/FireFUSE
    fi
  fi
}

EXCLUDE="\( -name jannson -o -name CMakeFiles -o -name opencv -o -name target -o -name node_modules -o -name .git -o -name \"*.min.*\" -o -name \"*.o\" \) -prune"
EXCLUDESRC="\( -name \"*.jpg\" -o -name \"*.png\" -o -name \"*.woff\" -o -name \"*.ttf\" \) -prune"
INCLUDE="\( -name '*.js' -o -name '*.java' -o -name '*.html' -o -name '*.css' -o -name '*.xml' -o -name '*.c' -o -name '*.cpp' -o -name '*.h' -o -name '*.hpp' -o -name '*.sh' -o -name '*.bat' -o -prune \)"

function lf() {
  if [ "$1" == "" ]; then
    eval "find . $EXCLUDE -o -type f -print"
  else
    eval "find . $EXCLUDE -o -type f -name \"$1*\" -print"
  fi
}

function repgrep() {
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -HE \"$1\" {} \; -exec sed -i -e \"s/$1/$2/g\" {} \; "
}

function lgrep() {
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -HE \"$1\" {} \; "
}

function vgrep() {
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -q -E \"$1\" {} \; -exec echo vi -c 'lcd %:p:h' -c '/$1/' {} +"
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -q -E \"$1\" {} \; -exec vi -c 'lcd %:p:h' -c '/$1/' {} +"
}

function v() {
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f -name \"$1*\" -exec echo vi -c 'lcd %:p:h' {} + "
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f -name \"$1*\" -exec vi -c 'lcd %:p:h' {} + "
}

function coredump {
  ulimit -c unlimited
  sudo bash -c "echo ./core > /proc/sys/kernel/core_pattern"
}

alias sa='eval `ssh-agent -s`; ssh-add ~/.ssh/id_rsa'
alias sob='source ~/bin/bashrc'
alias vib='vi ~/bin/bashrc'
alias vset='vi -c "lcd %:p:h" ~/.m2/settings.xml'
alias otp='echo $RANDOM | md5sum'
alias h='history'
alias hg='history | grep '
