function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working directory clean" ]] && echo "*"
}
function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/[\1$(parse_git_dirty)]/"
}

#function parse_git_branch () {
#  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
#}

function job_count () {
  jobs | wc -l
}
   
RED="\[\033[0;31m\]"; YELLOW="\[\033[0;33m\]"; GREEN="\[\033[0;32m\]"; NO_COLOR="\[\033[0m\]"
    
PS1="$GREEN\h$NO_COLOR:\w$YELLOW:\$(parse_git_branch)$NO_COLOR:\$(job_count)> "

function m() {
  if [ "$1" == "CI" ]; then 
    mvn clean install -Dmaven.test.skip=true
    if [ $? -ne 0 ]; then more target/surefire-reports/*.txt; fi
  elif [ "$1" == "rprep" ]; then 
    mvn clean release:prepare && echo "step #1: otp" && echo "step #2: g relb #.#" && echo "step #3: mvn release:perform"
  elif [ "$1" == "rperf" ]; then 
    mvn clean release:perform 
  elif [ "$1" == "rback" ]; then 
    mvn clean release:rollback 
  elif [ "$1" == "ci" ]; then 
    mvn clean install
    if [ $? -ne 0 ]; then more target/surefire-reports/*.txt; fi
  elif [ "$1" == "ccas" ]; then 
    mvn clean compile assembly:single
  elif [ "$1" == "cid" ]; then 
    mvn clean install deploy
    if [ $? -ne 0 ]; then more target/surefire-reports/*.txt; fi
  elif [ "$1" == "err" ]; then 
    more target/surefire-reports/*.txt
  fi
}

function bt() {
	if [ "$EXEC" == "" ]; then
		echo "ERROR	: EXEC has not been defined"
		echo "TRY	: export EXEC=name-of-executabe"
	elif [ ! -e $EXEC ]; then
		echo "ERROR	: $EXEC does not exist"
		echo "TRY	: export EXEC=name-of-executabe"
	elif [ ! -e core ]; then
		echo "ERROR	: no core file"
		echo "TRY	: coredump"
	else
		echo "COMMAND	: gdb -q -x ~/pixel/gdb.cmd $EXEC core"
		gdb -q -x ~/pixel/gdb.cmd $EXEC core
	fi
}

function c() {
  if [ "$1" == "w" ]; then cd *.wiki
  elif [ "$1" == "down" ]; then cd ~/Downloads
  elif [ "$1" == "ar" ]; then cd ~/Arduino
  elif [ "$1" == "t" ]; then cd target
  elif [ "$1" == "D" ]; then cd Debug
  elif [ "$1" == "tj" ]; then cd ~/tbw/workspace/jansson
  elif [ "$1" == "vb" ]; then cd ~/tbw/workspace/vbmodbus
  elif [ "$1" == "tr" ]; then cd ~/tbw/workspace/ResourceTree
  elif [ "$1" == "troo" ]; then cd ~/tbw/workspace/rootil
  elif [ "$1" == "tw" ]; then cd ~/tbw/workspace/RESTserver
  elif [ "$1" == "tsb" ]; then cd ~/tbw/workspace/FinesseSmartBoards
  elif [ "$1" == "tmb" ]; then cd ~/tbw/workspace/modbustcpslave
  elif [ "$1" == "sam" ]; then cd ~/tbw/workspace/sam
  elif [ "$1" == "ts" ]; then cd ~/tbw/workspace/sam
  elif [ "$1" == "td" ]; then cd ~/tbw/workspace/deploy
  elif [ "$1" == "tc" ]; then cd ~/tbw/workspace/Configurations
  elif [ "$1" == "tbc" ]; then cd ~/tbw/workspace/tbw-client
  elif [ "$1" == "tbcj" ]; then cd ~/tbw/workspace/tbw-client/src/main/java/com/finesse/tbw
  elif [ "$1" == "th" ]; then cd ~/tbw/workspace/HouseKeeper
  elif [ "$1" == "tt" ]; then cd ~/tbw/workspace/FinesseTest
  elif [ "$1" == "ti" ]; then cd ~/tbw/workspace/FinesseTIplatform
  elif [ "$1" == "tu" ]; then cd ~/tbw/workspace/FinesseUtils
  elif [ "$1" == "3d" ]; then cd ~/RepRap/Printrun
  elif [ "$1" == "tom" ]; then cd /opt/local/share/tomcat
  elif [ "$1" == "sea" ]; then cd ~/dev
  elif [ "$1" == "fin" ]; then cd ~/finesse
  elif [ "$1" == "tbw" ]; then cd ~/finesse/tbw/workspace
  elif [ "$1" == "tbwd" ]; then cd ~/finesse/tbw-dev/workspace
  elif [ "$1" == "tbww" ]; then cd ~/finesse/tbw.wiki
  elif [ -e ~/dev/ ]; then cd ~/dev
  elif [ -e ~/github ]; then cd ~/github
  else cd ~
  fi
  if [ "$1" == "s" ]; then 
    if [ -e FireSight ]; then cd FireSight; else cd FireREST/FireSight; fi
  elif [ "$1" == "aen" ]; then cd aeneas-michael
  elif [ "$1" == "B" ]; then cd FireBOM
  elif [ "$1" == "b" ]; then cd firebom-js
  elif [ "$1" == "bil" ]; then cd scv-bilara
  elif [ "$1" == "bom" ]; then cd FireBOM
  elif [ "$1" == "bu" ]; then cd translation
  elif [ "$1" == "c" ]; then cd FirePiCam
  elif [ "$1" == "cv" ]; then cd opencv
  elif [ "$1" == "dl" ]; then cd ~/Downloads
  elif [ "$1" == "dla" ]; then cd ~/Downloads/Arduino
  elif [ "$1" == "dn" ]; then cd ~/Downloads
  elif [ "$1" == "du" ]; then cd diff-upsert
  elif [ "$1" == "fb" ]; then cd FireBolt
  elif [ "$1" == "fg" ]; then cd FireGear
  elif [ "$1" == "fn" ]; then cd firenodejs
  elif [ "$1" == "fp" ]; then cd FirePump
  elif [ "$1" == "fpd" ]; then cd ~/dev/FPD-LooseCanon
  elif [ "$1" == "fs" ]; then cd FireSlide
  elif [ "$1" == "g" ]; then cd firepick-org.wiki
  elif [ "$1" == "gf" ]; then cd gfilter
  elif [ "$1" == "html" ]; then cd FireREST/www/html
  elif [ "$1" == "io" ]; then cd firepick1.github.io
  elif [ "$1" == "jan" ]; then cd ~/dev/jansson
  elif [ "$1" == "ki" ]; then cd kinann
  elif [ "$1" == "kir" ]; then cd kinann-rest
  elif [ "$1" == "lc" ]; then cd FPD-LooseCanon
  elif [ "$1" == "lcw" ]; then cd FPD-LooseCanon.wiki
  elif [ "$1" == "mj" ]; then cd mathjs
  elif [ "$1" == "mrk" ]; then cd merkle-json
  elif [ "$1" == "mote" ] || [ "$1" == "m" ]; then cd FireMote
  elif [ "$1" == "o" ]; then cd openpnp/gui
  elif [ "$1" == "oan" ]; then cd oya-ann
  elif [ "$1" == "oas" ]; then cd oya-asset
  elif [ "$1" == "oc" ]; then cd oya-chain
  elif [ "$1" == "opcb" ]; then cd oyapcb
  elif [ "$1" == "opi" ]; then cd oyapi
  elif [ "$1" == "o3" ]; then cd oya3d
  elif [ "$1" == "osc" ]; then cd oya-scan
  elif [ "$1" == "ov" ]; then cd oya-vue
  elif [ "$1" == "p" ]; then cd ~/pixel
  elif [ "$1" == "pa" ]; then cd astar-path
  elif [ "$1" == "part" ]; then cd firepart
  elif [ "$1" == "pcb" ]; then cd jspcb
  elif [ "$1" == "ph" ]; then cd ~/dev/ph5
  elif [ "$1" == "pick" ]; then cd firepick
  elif [ "$1" == "pix" ]; then cd ~/pixel
  elif [ "$1" == "pixel" ]; then cd ~/pixel
  elif [ "$1" == "po" ]; then cd Pinout.xyz
  elif [ "$1" == "r" ]; then cd FireREST
  elif [ "$1" == "rb" ]; then cd rest-bundle
  elif [ "$1" == "vg" ]; then cd vue-g-row-col
  elif [ "$1" == "rcl" ]; then cd firerest-client
  elif [ "$1" == "rcm" ]; then cd firerest-cmd
  elif [ "$1" == "sc" ]; then cd firestep-cam 
  elif [ "$1" == "scv" ]; then cd sc-voice
  elif [ "$1" == "st" ]; then cd FireStep
  elif [ "$1" == "v" ]; then cd fpd-vision
  elif [ "$1" == "vmc" ]; then cd vue-motion-cam

  elif [ "$1" == "f" ]; then
    if [ -e FireFUSE ]; then cd FireFUSE
    else cd FireREST/FireFUSE
    fi
  fi

  if [ "$2" != "" ]; then 
    cd $2 
  fi
}

EXCLUDE="\( -name local -o -name dist -o -name bower_components -o -name .metadata -o -name \"*.so\" -o -name bin -o -name ZBar -o -name bootstrap -o -name lib -o -name FireSight -o -name FireFUSE -o -name jansson -o -name jannson -o -name CMakeFiles -o -name opencv -o -name target -o -name node_modules -o -name .git -o -name \"*.class\" -o -name \"*.min.*\" -o -name \"*.o\" \) -prune"
EXCLUDESRC="\( -name \"*.map\" -o -name \"*.jpg\" -o -name \"*.png\" -o -name \"*.woff\" -o -name \"*.ttf\" \) -prune"
INCLUDE="\( -name '*.po' -name '*.js' -o -name '*.java' -o -name '*.html' -o -name '*.css' -o -name '*.xml' -o -name '*.c' -o -name '*.cpp' -o -name '*.h' -o -name '*.hpp' -o -name '*.sh' -o -name '*.bat' -o -prune \)"

function lf() {
  if [ "$1" == "" ]; then
    echo "find . $EXCLUDE -o -type f -print"
    eval "find . $EXCLUDE -o -type f -print"
  else
    echo "find . $EXCLUDE -o -type f -name \"$1*\" -print"
    eval "find . $EXCLUDE -o -type f -name \"$1*\" -print"
  fi
}

function repgrep() {
  echo "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -HE \"$1\" {} \; -exec sed -i -e \"s/$1/$2/g\" {} \; "
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -HE \"$1\" {} \; -exec sed -i -e \"s/$1/$2/g\" {} \; "
}

function lgrep() {
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -HE \"$1\" {} \; "
}

function lgrepi() {
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -iHE \"$1\" {} \; "
}

function vgrep() {
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -q -E \"$1\" {} \; -exec echo vi -c 'lcd %:p:h' -c '/$1/' {} +"
  eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f $INCLUDE -exec grep -q -E \"$1\" {} \; -exec vi -c 'lcd %:p:h' -c '/$1/' {} +"
}

function v() {
  if [ "$2" == "" ]; then
    eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f -name \"$1*\" -exec echo vi -c 'cd %:p:h' {} + "
    eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f -name \"$1*\" -exec vi -c 'cd %:p:h' {} + "
  else
    eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f -name \"$1*\" -exec echo vi -c 'cd %:p:h' -c 'e $2*' {} + "
    eval "find . $EXCLUDE -o $EXCLUDESRC -o -type f -name \"$1*\" -exec vi -c 'cd %:p:h'  -c 'e $2*' {} + "
  fi
}

function coredump {
  ulimit -c unlimited
  sudo bash -c "echo ./core > /proc/sys/kernel/core_pattern"
}

function seagate {
  fuser ~/seagate
  if [ "$1" == "off" ] || [ "$1" == "on" ]; then 
    echo sudo umount ~/seagate; 
    sudo umount ~/seagate; 
    if [ $? -ne 0 ]; then echo "umount failed"; fi
  fi
  if [ "$1" == "on" ]; then 
    echo sudo mount -a
    sudo mount -a
    if [ $? -ne 0 ]; then echo "mount failed"; fi
  fi
  ~/seagate/hello
}

#function bcata {
	#echo "CMD	: ./build clean all"
	#./build clean all
	#rc=$?;
	#if [ $rc -eq 0 ]; then
		#echo "CMD	: target/test"
		#target/test
	#else
		#echo "ERROR	: build failed rc:" $rc
		#return $rc
	#fi
#}

function bcati {
	echo "CMD	: ./build clean all"
	./build clean all
	rc=$?;
	if [ $rc -eq 0 ]; then
		echo "CMD	: rsync -avz ~/tbw/workspace/Configurations/ ~/ti/Configurations/"
		rsync -avz ~/tbw/workspace/Configurations/ ~/ti/Configurations/
		echo "CMD	: rsync -avz ~/ti/ /home/ti/finesse/"
		rsync -avz ~/ti/ /home/ti/finesse/
		echo "CMD	: rsync -avz /home/ti/finesse/ root@ti-karl:/home/ti/finesse/"
		rsync -avz /home/ti/finesse/ root@ti-karl:/home/ti/finesse/
	else
		echo "ERROR	: build failed rc:" $rc
		return $rc
	fi
}

function bca86 {
	echo "CMD	: ./build clean all"
	export CONFIG=Debug-86
	LOOP=1
	while [ $LOOP -eq 1 ]; do
		./build clean all
		rc=$?;
		if [ $rc -eq 0 ]; then
			$EXEC $*
		else
			echo "ERROR	: build failed rc:" $rc
		fi
		if [ "$1" == "-w" ]; then
			echo "SLEEP	: ..."
			sleep 5
		else
			LOOP=0
		fi
	done
}


alias ec='export CONFIG='
alias dirty='grep -i dirty /proc/meminfo'
alias ec2ips="aws ec2 describe-instances | json Reservations | json -a Instances[0].PublicIpAddress"
alias ec2ip0="aws ec2 describe-instances | json Reservations[0].Instances[0].PublicIpAddress"
alias ec2ip1="aws ec2 describe-instances | json Reservations[1].Instances[0].PublicIpAddress"
alias ec2ip2="aws ec2 describe-instances | json Reservations[2].Instances[0].PublicIpAddress"
alias ec2ip3="aws ec2 describe-instances | json Reservations[3].Instances[0].PublicIpAddress"
alias ec2ip4="aws ec2 describe-instances | json Reservations[4].Instances[0].PublicIpAddress"
alias scpec2="scp -i ~/.aws/g-sc-polly.pem ubuntu@`ec2ip0`"
alias scpec2-1="scp -i ~/.aws/g-sc-polly.pem ubuntu@`ec2ip1`"
alias sshec2="ssh -i ~/.aws/g-sc-polly.pem ubuntu@`ec2ip0`"
alias sshec2-1="ssh -i ~/.aws/g-sc-polly.pem ubuntu@`ec2ip1`"
alias sshec2-2="ssh -i ~/.aws/g-sc-polly.pem ubuntu@`ec2ip2`"
alias sshec2-3="ssh -i ~/.aws/g-sc-polly.pem ubuntu@`ec2ip3`"
alias sshec2-4="ssh -i ~/.aws/g-sc-polly.pem ubuntu@`ec2ip4`"
alias sshjoy='ssh admin@165.225.149.255'
alias sa='eval `ssh-agent -s`; ssh-add ~/.ssh/id_rsa'
alias sob='source ~/.bashrc'
alias vib='vi ~/bin/bashrc'
alias vffl='vi /var/log/firefuse.log'
alias vset='vi -c "lcd %:p:h" ~/.m2/settings.xml'
alias otp='echo $RANDOM | md5sum'
alias h='history'
alias hg='history | grep '
alias psv='ps -eo vsz,pmem,pcpu,user,pid,ppid,stime,tty,time,args --sort vsz'
alias fpdcam='rcp pi@fpd:/dev/firefuse/sync/cv/1/camera.jpg ~/Downloads ; chmod +w ~/Downloads/camera.jpg'
alias fp80cam='rcp pi@firepick80:/dev/firefuse/sync/cv/1/camera.jpg ~/Downloads ; chmod +w ~/Downloads/camera.jpg'
alias fpcam='rcp pi@firepick:/dev/firefuse/sync/cv/1/camera.jpg ~/Downloads ; chmod +w ~/Downloads/camera.jpg'
alias fpdcam='rcp pi@fpd:/dev/firefuse/sync/cv/1/camera.jpg ~/Downloads ; chmod +w ~/Downloads/camera.jpg'
alias freek='free | grep s.c | grep -Eo "[^ ]*$"'
alias freem='free -m | grep s.c | grep -Eo "[^ ]*$"'
alias gcode='echo $1 > /dev/firefuse/cnc/firepick1/gcode.fire'
alias irc='irssi -c chat.freenode.net -n KarlLew'
alias bca='./build clean -j 4; ./build all -j 4'
alias ba='./build all -j 4'
alias bclean='./build clean'
alias xfce='sudo startxfce4'
alias psg='ps -ef | grep -v "grep --color=auto" | grep '
alias aptinst='dpkg --get-selections | grep -v deinstall | grep'
alias aptavail='apt-cache search '
alias bld='./build |& tee build.log'
alias bpb='./build post-build |& tee build.log'
alias wintbw='tmux -f ~/pixel/tmux.tbw attach'
alias win='tmux attach'
alias tihomefs='sshfs -o nonempty root@ti-home:/home/ti/finesse /home/ti'
alias tifs='sshfs -o nonempty root@ti-karl:/home/ti/finesse /home/ti/finesse'
alias fpdfs='sshfs -o nonempty pi@fpd:/home/pi/FireREST ~/fpd'
alias restdssl='sudo Debug-86/RESTserver -d --ssl -m WebServer/json/FullG4Lite.json ../Configurations/KeyTok.txt'
alias netex='pushd ~/dev/Downloads/netExtenderClient; sudo ./netExtender -u klew -p Firepass -d Finesse sslvpn.finesse.com; popd'
alias restd='sudo Debug-86/RESTserver -d -m WebServer/json/FullG4Lite.json ../Configurations/KeyTok.txt'
alias rest='Debug-86/RESTserver -m WebServer/json/FullG4Lite.json ../Configurations/KeyTok.txt'
alias vgnd='valgrind --leak-check=full --show-reachable=yes --track-origins=yes '
alias mocijs='mocha -w -R min --inline-diffs -i -g TESTTEST *.js'
alias moctjs='mocha -w -R min --inline-diffs -g TESTTEST *.js'
alias mocjs='mocha -w -R min --inline-diffs *.js'
alias moc1='mocha -w -R min --inline-diffs -g TESTTEST server/firepick/*.js'
alias moci1='mocha -w -R min --inline-diffs -i -g TESTTEST server/firepick/*.js'
alias rel='scripts/release'
alias mci='mvn clean install'
alias sort='sort -b -f '
alias tbw='cd ~/tbw/workspace/tbw-client/; java -jar target/tbw-client*jar '
#alias g4='rcp ~/ti/TBW* root@g4lab:/home/ti; mv ~/ti/TBW* ~/ti/unused'
alias g4='tbw --host g4labp2 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv1='tbw --host g4labdv1 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv2='tbw --host g4labdv2 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv3='tbw --host g4labdv3 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv4='tbw --host g4labdv4 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv5='tbw --host g4labdv5 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv6='tbw --host g4labdv6 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv7='tbw --host g4labdv7 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv8='tbw --host g4labdv8 -u FinMan -p bioreactor --tbw-update ~/ti/TBW*'
alias g4dv4_8='g4dv4;g4dv5;g4dv6;g4dv7;g4dv8'
alias g4p2='rcp ~/ti/TBW* root@g4labp2:/home/ti; mv ~/ti/TBW* ~/ti/unused'
alias g4max='rcp ~/ti/TBW* root@g4max:/home/ti; mv ~/ti/TBW* ~/ti/unused'
alias vsrc='vi -c "cd src"'
alias odc='od -t cx1'
alias npmb='npm run build'
alias npmbd='npm run build && npm run dev'
alias npmc='npm run clean'
alias npmd='npm run dev'
alias npmi='npm install'
alias npmt='npm test'
alias npmtt='npm run test:test'
alias npmtw='npm run test:watch'
alias npmj='npm run build:jit |& tee npm.log | head -20'
alias npms='npm start'
alias npmssl='npm run start:ssl'
alias npmstaging='npm run start:staging'
alias npmjs='(npm run build:jit && npm start) |& tee npm.log | head -15'
alias b="if [ -e build ]; then build; else scripts/build; fi"
alias bs="b && npms"
alias fname='find . -name '
alias ff='find . \( -name .git -o -name node_modules \) -prune -o -type f -print'
alias ffx='find . \( -name .git -o -name node_modules \) -prune -o -type f -print | xargs'
alias ffsed='find . \( -name .git -o -name node_modules \) -prune -o -type f -print | xargs sed -i '
alias jsb="js-beautify -r "
alias jsbx="find . -name '*.js' | xargs js-beautify -r "
alias gsutta='./scripts/grep-sutta.sh '
alias play='ffplay -nodisp -autoexit '

export IGNOREEOF=42
export VISUAL=vim
export BASH_ENV=~/.bashrc
