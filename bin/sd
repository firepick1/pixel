#! /bin/bash

if [ -e /dev/sdb ]; then
  echo "SD Card: ready"
  sudo parted /dev/sdb unit s print
else
  echo "SD Card: (NO CARD)"
fi

p2sec=`sudo parted -m /dev/sdb unit s print | grep -e "^2" | sed s/[^s]*s[^s]*s:// | sed s/s.*//`
p2blk=$((p2sec/8))
echo "/dev/sdb2 partition 2 is $p2blk blocks@4KiB = $(( ($p2blk * 4)/1024 ))KiB"

echo
echo "Available images:"
ls -1 ~/Downloads/sd-image-*.gz 2> /dev/null
ls -1 ~/Downloads/sd-image-*.img 2> /dev/null

NAME=$2
if [ "$NAME" == "" ]; then
  NAME=`date +%d%m%y`
fi
echo
echo "SD working image: sd-image-$NAME.img"

function help() {
  echo
  echo "----------------------------------"
  echo 'Insert SD card, then type:'
  echo 
  echo 'sd --read-sd [NAME]'
  echo '  Create SD image as ~/Downloads/sd-image-NAME.gz'
  echo 'sd --write-sd [NAME]'
  echo '  Write ~/Downloads/sd-image-NAME.gz onto SD card'
  echo 'sd --expand-fs'
  echo '  resize2fs /dev/sdb2'
  echo 'sd --shrink-fs'
  echo '  resize2fs -p -M /dev/sdb2'
  echo 'sd --fsck'
  echo '  fsck.ext4 -p -f -C0 /dev/sdb2'
  echo "----------------------------------"
}

if [ ! -e /dev/sdb ] || [ "$1" == "" ] ; then
  help
  exit 0
fi

sudo -k
sudo date
if [ $? -ne 0 ]; then exit -1; fi

echo Unmounting SD card to restrict use during imaging
echo umount /dev/sdb1 /dev/sdb2 
if [ -e /dev/sdb1 ]; then echo unmounting /dev/sdb1; sudo umount /dev/sdb1 ; fi
if [ -e /dev/sdb2 ]; then echo unmounting /dev/sdb2; sudo umount /dev/sdb2 ; fi

if [ "$1" == "--fsck" ]; then 
  shift; 
  echo "sudo fsck.ext4 -p -f -C0 /dev/sdb2"
  sudo fsck.ext4 -p -f -C0 /dev/sdb2
  if [ $? -ne 0 ]; then echo FAILED; exit -1; fi
fi

if [ "$1" == "--shrink-fs" ]; then
  shift
  echo '  sudo resize2fs -p -M /dev/sdb2'
  sudo resize2fs -p -M /dev/sdb2
  if [ $? -ne 0 ]; then echo FAILED; exit -1; fi
fi
if [ "$1" == "--expand-fs" ]; then
  shift
  echo '  sudo resize2fs -p /dev/sdb2 $p2blk'
  sudo resize2fs -p /dev/sdb2 $p2blk
  if [ $? -ne 0 ]; then echo FAILED; exit -1; fi
fi

BLOCKS=555

if [ "$1" == "--read-sd" ]; then
  echo 'SD image backup will take some time (5-10m)'
  echo 'DO NOT INTERRUPT THIS PROCESS!!!'
  echo "sudo dd bs=4M count=$BLOCKS if=/dev/sdb | gzip -c > ~/Downloads/sd-image-$NAME.gz"
  sudo dd bs=4M count=$BLOCKS if=/dev/sdb | gzip -c > ~/Downloads/sd-image-$NAME.gz
  if [ $? -ne 0 ]; then
    echo ERROR: could not read SD card
    exit -1
  fi
  chmod -w ~/Downloads/sd-image-$NAME.gz 
  ls -lh ~/Downloads/sd-image*
  echo COMPLETED: SD card read and saved as ~/Downloads/sd-image-$NAME.gz 
elif [ "$1" == "--write-sd" ]; then
  echo 'SD image restore will take some time (5-10m)'
  echo 'DO NOT INTERRUPT THIS PROCESS!!!'
  if [ ! -e ~/Downloads/sd-image-$NAME.img ]; then
    echo "gunzip -c ~/Downloads/sd-image-$NAME.gz > ~/Downloads/sd-image-$NAME.img"
    gunzip -c ~/Downloads/sd-image-$NAME.gz > ~/Downloads/sd-image-$NAME.img
    if [ $? -ne 0 ]; then
      echo ERROR: could not create ~/Downloads/sd-image-$NAME.img
      exit -1
    fi
  fi
  echo "sudo dd bs=4M count=$BLOCKS of=/dev/sdb if=~/Downloads/sd-image-$NAME.img"
  sudo dd bs=4M count=$BLOCKS of=/dev/sdb if=~/Downloads/sd-image-$NAME.img
  if [ $? -ne 0 ]; then
    echo ERROR: could not write SD card
    exit -1
  fi
  echo COMPLETED: ~/Downloads/sd-image-$NAME.img written to SD card.
fi
sudo sync
echo sync completed
