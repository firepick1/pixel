#! /bin/bash

echo -e "INIT\t: updating apt..."
sudo apt-get upgrade
sudo apt-get update

function installApp() {
  APP=$1
  INST=$2
  if [ "$INST" == "" ]; then INST=$APP; fi
  type $APP >& /dev/null
  RC=$?; if [ "$RC" == "0" ]; then
      echo -e "INIT\t:" `type $APP`
  else
      echo -e "INIT\t: installing $APP (sudo)"
      sudo apt-get install -y $INST
  fi
}

function installLibDev() {
  LIB=$1
  MSG=`sudo ldconfig -p | grep $LIB.so`;
  RC=$?; if [ "$RC" == "0" ]; then
    echo -e "INIT\t: $MSG (OK)"
  else
    echo -e "INIT\t: installing $LIB-dev"
  fi
}

cd ~
#ln -sf /home/pixel/pixel/bin /home/pixel/bin
ln -sf ~/pixel/vimrc .vimrc
ln -sf ~/pixel/tmux.conf .tmux.conf
ln -sf ~/pixel/indent.pro .indent.pro
ln -sf ~/pixel/astyle.rc .astylerc

installApp curl

MSG=`sudo bash -c "type docker" >& /dev/null` 
RC=$?; if [ "$RC" == "0" ]; then
    echo -e "INIT\t: $MSG (OK)"
else
    echo -e "INIT\t: installing docker engine"
    sudo apt-get install -y\
      apt-transport-https ca-certificates gnupg-agent software-properties-common
    curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
    sudo apt-key fingerprint 0EBFCD88 \
      |& grep "9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88" >& /dev/null
    RC=$?; if [ "$RC" == "0" ]; then
      echo -e  "INIT\t: valid docker key"
    else
      echo -e  "INIT\t: invalid docker key (FATAL)"
      exit 1
    fi
    sudo add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/debian \
       $(lsb_release -cs) \
      stable"
   sudo apt-get update
   sudo apt-get -y install docker-ce docker-ce-cli containerd.io
   sudo groupadd docker
   sudo usermod -aG docker $USER
   newgrp docker
fi

exit

OLD_NODE=10.21
nodejs --version |& grep $OLD_NODE >& /dev/null
RC=$?; if [ "$RC" == "0" ]; then
  echo -e "INIT\t: uninstalling nodejs $OLD_NODE"
  sudo apt-get remove -y nodejs 
else
  echo -e "INIT\t: no legacy nodejs found (OK)"
fi

NODE_VER=14.15
nodejs --version |& grep $NODE_VER >& /dev/null
RC=$?; if [ "$RC" == "0" ]; then
  echo -e "INIT\t: nodejs $NODE_VER installed"
else
  echo -e "INIT\t: installing nodejs $NODE_VER"
  curl -sL https://deb.nodesource.com/setup_14.x | tee node_setup_14.x | sudo bash -
  sudo apt -y install nodejs
fi

installApp npm
installApp mkpasswd whois
installApp vue vue-cli
installApp cross-env
installApp concurrently
installApp vim
installApp nslookup dnsutils
installApp tmux
installApp sqlite3
installApp git

git config --global user.email "karl@firepick.org"
git config --global user.name "Karl Lew"
git config --global push.default simple

installApp mocha
installApp opusenc opus-tools
installApp ogginfo vorbis-tools

type rg >& /dev/null
RC=$?; if [ "$RC" == "0" ]; then
    echo -e "INIT\t: ripgrep installed"
else
    curl -LO https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep_11.0.2_amd64.deb
    sudo dpkg -i ripgrep_11.0.2_amd64.deb
fi

if [ -e .bashrc ]; then
    cmp .bashrc pixel/.bashrc
    RC=$?; if [ "$RC" != "0" ]; then
        mv -f .bashrc .bashrc.old
    fi
fi
ln -sf ~/pixel/.bashrc .bashrc
echo -e "INIT\t: exit and re-enter chroot to verify setup"

echo -e "INIT\t: pixel initialized"
