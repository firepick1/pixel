#!/usr/bin/bash
DBNAME=dpd.db
SCRIPT=`basename $0`
DIRNAME=`dirname $0`
BASH_JS_STDOUT=/tmp/$SCRIPT-cmd

node - <<'JS' $DIRNAME $SCRIPT "$@" > $BASH_JS_STDOUT
const util = require('util');
const fs = require('fs');
const fsp = fs.promises;
const path = require('path');
const exec = util.promisify(require('child_process').exec);
const MIN_PARMS = 0;
let [ NODE, DASH, DIRNAME, SCRIPT, ...args] = process.argv;

const msg = `${SCRIPT}:`;

function help() {
  console.error(`
NAME
  ${SCRIPT} - template for bash nodejs scripts

SYNOPSIS
  ${SCRIPT} NEWFILE

DESCRIPTION
  create new bash script with nodejs wrapper

  -?, --help
    print this help text

  -v, --verbose
    print more information to stderr

  NEWFILE
    File path of new bash script

EXAMPLES
  ${SCRIPT} -v scripts/my-new-script
`);
  process.exit(0);
}

function parseArgs() {
  const msg = `${SCRIPT}.parseArgs:`;
  // default values
  let dbg = 0;

  let parms = args.reduce((a,arg,i)=>{
    switch (arg) {
      case '-?':
      case '--help':
        help();
        break;
      case "--verbose":
      case "-v":
        dbg = 1;
        break;
      case "--very-verbose":
      case "-vv":
        dbg = 2;
        break;
      default:
        if (arg.at(0) === "-") {
          console.error(`${msg} [ERROR] ignoring ${arg}`);
        } else {
          a.push(arg);
        }
        break;
    }
    return a;
  }, []);
  if (parms.length < MIN_PARMS) {
    help();
  }

  let result = {
    dbg,
    parms,
  }
  dbg && console.error(msg, Object.assign({
    NODE,DASH, DIRNAME, SCRIPT, parms, 
  }, result));

  return result;
}
let {
  dbg,
  parms,
} = parseArgs();

async function main() {
  const msg = `${SCRIPT}.main:`;

  // REPLACE WITH YOUR JS [BEGIN]
  let [ fname ] = parms;
  let cmd = fs.existsSync(fname)
    ? `vim ${fname}`
    : `cp ${DIRNAME}/${SCRIPT} ${fname};chmod +x ${fname}; vim ${fname}`;
  console.log(cmd);
  // REPLACE WITH YOUR JS [END]
}

(async function() {
  try {
    main()
  } catch(e) {
    console.error(msg, e);
  }
})()

JS

# REPLACE WITH YOUR POST_BASH [BEGIN]
echo $BASH_JS_STDOUT
cat $BASH_JS_STDOUT
chmod +x $BASH_JS_STDOUT
$BASH_JS_STDOUT
# REPLACE WITH YOUR POST_BASH [END]
